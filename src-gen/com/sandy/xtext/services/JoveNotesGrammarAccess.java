/*
 * generated by Xtext
 */
package com.sandy.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JoveNotesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JoveNotesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoveNotes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessingHintsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessingHintsProcessingHintsParserRuleCall_0_0 = (RuleCall)cProcessingHintsAssignment_0.eContents().get(0);
		private final Assignment cChapterDetailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChapterDetailsChapterDetailsParserRuleCall_1_0 = (RuleCall)cChapterDetailsAssignment_1.eContents().get(0);
		private final Assignment cNotesElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNotesElementsNotesElementParserRuleCall_2_0 = (RuleCall)cNotesElementsAssignment_2.eContents().get(0);
		
		//JoveNotes:
		//	processingHints=ProcessingHints chapterDetails=ChapterDetails notesElements+=NotesElement*;
		@Override public ParserRule getRule() { return rule; }

		//processingHints=ProcessingHints chapterDetails=ChapterDetails notesElements+=NotesElement*
		public Group getGroup() { return cGroup; }

		//processingHints=ProcessingHints
		public Assignment getProcessingHintsAssignment_0() { return cProcessingHintsAssignment_0; }

		//ProcessingHints
		public RuleCall getProcessingHintsProcessingHintsParserRuleCall_0_0() { return cProcessingHintsProcessingHintsParserRuleCall_0_0; }

		//chapterDetails=ChapterDetails
		public Assignment getChapterDetailsAssignment_1() { return cChapterDetailsAssignment_1; }

		//ChapterDetails
		public RuleCall getChapterDetailsChapterDetailsParserRuleCall_1_0() { return cChapterDetailsChapterDetailsParserRuleCall_1_0; }

		//notesElements+=NotesElement*
		public Assignment getNotesElementsAssignment_2() { return cNotesElementsAssignment_2; }

		//NotesElement
		public RuleCall getNotesElementsNotesElementParserRuleCall_2_0() { return cNotesElementsNotesElementParserRuleCall_2_0; }
	}

	public class ProcessingHintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessingHints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessingHintsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSkipGenerationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSkipGenerationSkip_generationKeyword_1_0 = (Keyword)cSkipGenerationAssignment_1.eContents().get(0);
		private final Assignment cSkipGenerationInProductionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSkipGenerationInProductionSkip_generation_in_productionKeyword_2_0 = (Keyword)cSkipGenerationInProductionAssignment_2.eContents().get(0);
		
		//ProcessingHints:
		//	{ProcessingHints} skipGeneration="@skip_generation"? skipGenerationInProduction="@skip_generation_in_production"?;
		@Override public ParserRule getRule() { return rule; }

		//{ProcessingHints} skipGeneration="@skip_generation"? skipGenerationInProduction="@skip_generation_in_production"?
		public Group getGroup() { return cGroup; }

		//{ProcessingHints}
		public Action getProcessingHintsAction_0() { return cProcessingHintsAction_0; }

		//skipGeneration="@skip_generation"?
		public Assignment getSkipGenerationAssignment_1() { return cSkipGenerationAssignment_1; }

		//"@skip_generation"
		public Keyword getSkipGenerationSkip_generationKeyword_1_0() { return cSkipGenerationSkip_generationKeyword_1_0; }

		//skipGenerationInProduction="@skip_generation_in_production"?
		public Assignment getSkipGenerationInProductionAssignment_2() { return cSkipGenerationInProductionAssignment_2; }

		//"@skip_generation_in_production"
		public Keyword getSkipGenerationInProductionSkip_generation_in_productionKeyword_2_0() { return cSkipGenerationInProductionSkip_generation_in_productionKeyword_2_0; }
	}

	public class ChapterDetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChapterDetails");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestPaperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTestPaperTest_paperKeyword_0_0 = (Keyword)cTestPaperAssignment_0.eContents().get(0);
		private final Keyword cSubjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubjectNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubjectNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cSubjectNameAssignment_2.eContents().get(0);
		private final Keyword cChapterNumberKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChapterNumberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChapterNumberINTTerminalRuleCall_4_0 = (RuleCall)cChapterNumberAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubChapterNumberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubChapterNumberINTTerminalRuleCall_6_0 = (RuleCall)cSubChapterNumberAssignment_6.eContents().get(0);
		private final Keyword cChapterNameKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cChapterNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cChapterNameSTRINGTerminalRuleCall_8_0 = (RuleCall)cChapterNameAssignment_8.eContents().get(0);
		
		//ChapterDetails:
		//	testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
		//	"chapterName" chapterName=STRING;
		@Override public ParserRule getRule() { return rule; }

		//testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
		//"chapterName" chapterName=STRING
		public Group getGroup() { return cGroup; }

		//testPaper="@test_paper"?
		public Assignment getTestPaperAssignment_0() { return cTestPaperAssignment_0; }

		//"@test_paper"
		public Keyword getTestPaperTest_paperKeyword_0_0() { return cTestPaperTest_paperKeyword_0_0; }

		//"subject"
		public Keyword getSubjectKeyword_1() { return cSubjectKeyword_1; }

		//subjectName=STRING
		public Assignment getSubjectNameAssignment_2() { return cSubjectNameAssignment_2; }

		//STRING
		public RuleCall getSubjectNameSTRINGTerminalRuleCall_2_0() { return cSubjectNameSTRINGTerminalRuleCall_2_0; }

		//"chapterNumber"
		public Keyword getChapterNumberKeyword_3() { return cChapterNumberKeyword_3; }

		//chapterNumber=INT
		public Assignment getChapterNumberAssignment_4() { return cChapterNumberAssignment_4; }

		//INT
		public RuleCall getChapterNumberINTTerminalRuleCall_4_0() { return cChapterNumberINTTerminalRuleCall_4_0; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//subChapterNumber=INT
		public Assignment getSubChapterNumberAssignment_6() { return cSubChapterNumberAssignment_6; }

		//INT
		public RuleCall getSubChapterNumberINTTerminalRuleCall_6_0() { return cSubChapterNumberINTTerminalRuleCall_6_0; }

		//"chapterName"
		public Keyword getChapterNameKeyword_7() { return cChapterNameKeyword_7; }

		//chapterName=STRING
		public Assignment getChapterNameAssignment_8() { return cChapterNameAssignment_8; }

		//STRING
		public RuleCall getChapterNameSTRINGTerminalRuleCall_8_0() { return cChapterNameSTRINGTerminalRuleCall_8_0; }
	}

	public class NotesElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotesElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordMeaningParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFIBParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCharacterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTeacherNoteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMatchingParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEventParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTrueFalseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cChemEquationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cChemCompoundParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSpellbeeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cImageLabelParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEquationParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRefToContextParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cMultiChoiceParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//NotesElement:
		//	WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse |
		//	ChemEquation | ChemCompound | Spellbee | ImageLabel | Equation | RefToContext | MultiChoice;
		@Override public ParserRule getRule() { return rule; }

		//WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse | ChemEquation
		//| ChemCompound | Spellbee | ImageLabel | Equation | RefToContext | MultiChoice
		public Alternatives getAlternatives() { return cAlternatives; }

		//WordMeaning
		public RuleCall getWordMeaningParserRuleCall_0() { return cWordMeaningParserRuleCall_0; }

		//QuestionAnswer
		public RuleCall getQuestionAnswerParserRuleCall_1() { return cQuestionAnswerParserRuleCall_1; }

		//FIB
		public RuleCall getFIBParserRuleCall_2() { return cFIBParserRuleCall_2; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_3() { return cDefinitionParserRuleCall_3; }

		//Character
		public RuleCall getCharacterParserRuleCall_4() { return cCharacterParserRuleCall_4; }

		//TeacherNote
		public RuleCall getTeacherNoteParserRuleCall_5() { return cTeacherNoteParserRuleCall_5; }

		//Matching
		public RuleCall getMatchingParserRuleCall_6() { return cMatchingParserRuleCall_6; }

		//Event
		public RuleCall getEventParserRuleCall_7() { return cEventParserRuleCall_7; }

		//TrueFalse
		public RuleCall getTrueFalseParserRuleCall_8() { return cTrueFalseParserRuleCall_8; }

		//ChemEquation
		public RuleCall getChemEquationParserRuleCall_9() { return cChemEquationParserRuleCall_9; }

		//ChemCompound
		public RuleCall getChemCompoundParserRuleCall_10() { return cChemCompoundParserRuleCall_10; }

		//Spellbee
		public RuleCall getSpellbeeParserRuleCall_11() { return cSpellbeeParserRuleCall_11; }

		//ImageLabel
		public RuleCall getImageLabelParserRuleCall_12() { return cImageLabelParserRuleCall_12; }

		//Equation
		public RuleCall getEquationParserRuleCall_13() { return cEquationParserRuleCall_13; }

		//RefToContext
		public RuleCall getRefToContextParserRuleCall_14() { return cRefToContextParserRuleCall_14; }

		//MultiChoice
		public RuleCall getMultiChoiceParserRuleCall_15() { return cMultiChoiceParserRuleCall_15; }
	}

	public class WordMeaningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordMeaning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cWordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWordSTRINGTerminalRuleCall_2_0 = (RuleCall)cWordAssignment_2.eContents().get(0);
		private final Assignment cMeaningAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMeaningSTRINGTerminalRuleCall_3_0 = (RuleCall)cMeaningAssignment_3.eContents().get(0);
		
		//WordMeaning:
		//	"@wm" hideFromView="hide"? word=STRING meaning=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@wm" hideFromView="hide"? word=STRING meaning=STRING
		public Group getGroup() { return cGroup; }

		//"@wm"
		public Keyword getWmKeyword_0() { return cWmKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//word=STRING
		public Assignment getWordAssignment_2() { return cWordAssignment_2; }

		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_2_0() { return cWordSTRINGTerminalRuleCall_2_0; }

		//meaning=STRING
		public Assignment getMeaningAssignment_3() { return cMeaningAssignment_3; }

		//STRING
		public RuleCall getMeaningSTRINGTerminalRuleCall_3_0() { return cMeaningSTRINGTerminalRuleCall_3_0; }
	}

	public class QuestionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_2_0 = (RuleCall)cQuestionAssignment_2.eContents().get(0);
		private final Assignment cAnswerPartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswerPartsSTRINGTerminalRuleCall_3_0 = (RuleCall)cAnswerPartsAssignment_3.eContents().get(0);
		private final Assignment cCmapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCmapCMapParserRuleCall_4_0 = (RuleCall)cCmapAssignment_4.eContents().get(0);
		
		//QuestionAnswer:
		//	"@qa" hideFromView="hide"? question=STRING answerParts+=STRING+ cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@qa" hideFromView="hide"? question=STRING answerParts+=STRING+ cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@qa"
		public Keyword getQaKeyword_0() { return cQaKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//question=STRING
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_2_0() { return cQuestionSTRINGTerminalRuleCall_2_0; }

		//answerParts+=STRING+
		public Assignment getAnswerPartsAssignment_3() { return cAnswerPartsAssignment_3; }

		//STRING
		public RuleCall getAnswerPartsSTRINGTerminalRuleCall_3_0() { return cAnswerPartsSTRINGTerminalRuleCall_3_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_4() { return cCmapAssignment_4; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_4_0() { return cCmapCMapParserRuleCall_4_0; }
	}

	public class FIBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFibKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_2_0 = (RuleCall)cQuestionAssignment_2.eContents().get(0);
		private final Assignment cAnswersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswersSTRINGTerminalRuleCall_3_0 = (RuleCall)cAnswersAssignment_3.eContents().get(0);
		
		//FIB:
		//	"@fib" hideFromView="hide"? question=STRING answers+=STRING+;
		@Override public ParserRule getRule() { return rule; }

		//"@fib" hideFromView="hide"? question=STRING answers+=STRING+
		public Group getGroup() { return cGroup; }

		//"@fib"
		public Keyword getFibKeyword_0() { return cFibKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//question=STRING
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_2_0() { return cQuestionSTRINGTerminalRuleCall_2_0; }

		//answers+=STRING+
		public Assignment getAnswersAssignment_3() { return cAnswersAssignment_3; }

		//STRING
		public RuleCall getAnswersSTRINGTerminalRuleCall_3_0() { return cAnswersSTRINGTerminalRuleCall_3_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTermSTRINGTerminalRuleCall_2_0 = (RuleCall)cTermAssignment_2.eContents().get(0);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		private final Assignment cCmapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCmapCMapParserRuleCall_4_0 = (RuleCall)cCmapAssignment_4.eContents().get(0);
		
		//Definition:
		//	"@definition" hideFromView="hide"? term=STRING definition=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@definition" hideFromView="hide"? term=STRING definition=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@definition"
		public Keyword getDefinitionKeyword_0() { return cDefinitionKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//term=STRING
		public Assignment getTermAssignment_2() { return cTermAssignment_2; }

		//STRING
		public RuleCall getTermSTRINGTerminalRuleCall_2_0() { return cTermSTRINGTerminalRuleCall_2_0; }

		//definition=STRING
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//STRING
		public RuleCall getDefinitionSTRINGTerminalRuleCall_3_0() { return cDefinitionSTRINGTerminalRuleCall_3_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_4() { return cCmapAssignment_4; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_4_0() { return cCmapCMapParserRuleCall_4_0; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cCharacterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCharacterSTRINGTerminalRuleCall_2_0 = (RuleCall)cCharacterAssignment_2.eContents().get(0);
		private final Assignment cEstimateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEstimateSTRINGTerminalRuleCall_3_0 = (RuleCall)cEstimateAssignment_3.eContents().get(0);
		private final Assignment cCmapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCmapCMapParserRuleCall_4_0 = (RuleCall)cCmapAssignment_4.eContents().get(0);
		
		//Character:
		//	"@character" hideFromView="hide"? character=STRING estimate=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@character" hideFromView="hide"? character=STRING estimate=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@character"
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//character=STRING
		public Assignment getCharacterAssignment_2() { return cCharacterAssignment_2; }

		//STRING
		public RuleCall getCharacterSTRINGTerminalRuleCall_2_0() { return cCharacterSTRINGTerminalRuleCall_2_0; }

		//estimate=STRING
		public Assignment getEstimateAssignment_3() { return cEstimateAssignment_3; }

		//STRING
		public RuleCall getEstimateSTRINGTerminalRuleCall_3_0() { return cEstimateSTRINGTerminalRuleCall_3_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_4() { return cCmapAssignment_4; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_4_0() { return cCmapCMapParserRuleCall_4_0; }
	}

	public class TeacherNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TeacherNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cCaptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cCaptionAssignment_2.eContents().get(0);
		private final Assignment cNoteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNoteSTRINGTerminalRuleCall_3_0 = (RuleCall)cNoteAssignment_3.eContents().get(0);
		private final Assignment cCmapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCmapCMapParserRuleCall_4_0 = (RuleCall)cCmapAssignment_4.eContents().get(0);
		
		//TeacherNote:
		//	"@tn" hideFromView="hide"? caption=STRING? note=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@tn" hideFromView="hide"? caption=STRING? note=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@tn"
		public Keyword getTnKeyword_0() { return cTnKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//caption=STRING?
		public Assignment getCaptionAssignment_2() { return cCaptionAssignment_2; }

		//STRING
		public RuleCall getCaptionSTRINGTerminalRuleCall_2_0() { return cCaptionSTRINGTerminalRuleCall_2_0; }

		//note=STRING
		public Assignment getNoteAssignment_3() { return cNoteAssignment_3; }

		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_3_0() { return cNoteSTRINGTerminalRuleCall_3_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_4() { return cCmapAssignment_4; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_4_0() { return cCmapCMapParserRuleCall_4_0; }
	}

	public class MatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cSkipReverseQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSkipReverseQuestionSkip_reverse_questionKeyword_2_0 = (Keyword)cSkipReverseQuestionAssignment_2.eContents().get(0);
		private final Assignment cQuestionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_3_0 = (RuleCall)cQuestionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPairsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPairsMatchPairParserRuleCall_5_0 = (RuleCall)cPairsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Matching:
		//	"@match" hideFromView="hide"? skipReverseQuestion="skip_reverse_question"? question=STRING? "{" pairs+=MatchPair+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"@match" hideFromView="hide"? skipReverseQuestion="skip_reverse_question"? question=STRING? "{" pairs+=MatchPair+ "}"
		public Group getGroup() { return cGroup; }

		//"@match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//skipReverseQuestion="skip_reverse_question"?
		public Assignment getSkipReverseQuestionAssignment_2() { return cSkipReverseQuestionAssignment_2; }

		//"skip_reverse_question"
		public Keyword getSkipReverseQuestionSkip_reverse_questionKeyword_2_0() { return cSkipReverseQuestionSkip_reverse_questionKeyword_2_0; }

		//question=STRING?
		public Assignment getQuestionAssignment_3() { return cQuestionAssignment_3; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_3_0() { return cQuestionSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//pairs+=MatchPair+
		public Assignment getPairsAssignment_5() { return cPairsAssignment_5; }

		//MatchPair
		public RuleCall getPairsMatchPairParserRuleCall_5_0() { return cPairsMatchPairParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MatchPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMatchQuestionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMatchQuestionSTRINGTerminalRuleCall_0_0 = (RuleCall)cMatchQuestionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMatchAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMatchAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cMatchAnswerAssignment_2.eContents().get(0);
		
		//MatchPair:
		//	matchQuestion=STRING "=" matchAnswer=STRING;
		@Override public ParserRule getRule() { return rule; }

		//matchQuestion=STRING "=" matchAnswer=STRING
		public Group getGroup() { return cGroup; }

		//matchQuestion=STRING
		public Assignment getMatchQuestionAssignment_0() { return cMatchQuestionAssignment_0; }

		//STRING
		public RuleCall getMatchQuestionSTRINGTerminalRuleCall_0_0() { return cMatchQuestionSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//matchAnswer=STRING
		public Assignment getMatchAnswerAssignment_2() { return cMatchAnswerAssignment_2; }

		//STRING
		public RuleCall getMatchAnswerSTRINGTerminalRuleCall_2_0() { return cMatchAnswerSTRINGTerminalRuleCall_2_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventSTRINGTerminalRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Assignment cTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeSTRINGTerminalRuleCall_3_0 = (RuleCall)cTimeAssignment_3.eContents().get(0);
		
		//Event:
		//	"@event" hideFromView="hide"? event=STRING time=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@event" hideFromView="hide"? event=STRING time=STRING
		public Group getGroup() { return cGroup; }

		//"@event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//event=STRING
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//STRING
		public RuleCall getEventSTRINGTerminalRuleCall_2_0() { return cEventSTRINGTerminalRuleCall_2_0; }

		//time=STRING
		public Assignment getTimeAssignment_3() { return cTimeAssignment_3; }

		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_3_0() { return cTimeSTRINGTerminalRuleCall_3_0; }
	}

	public class TrueFalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrueFalse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrue_falseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementSTRINGTerminalRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Assignment cTruthValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTruthValueBOOLTerminalRuleCall_3_0 = (RuleCall)cTruthValueAssignment_3.eContents().get(0);
		private final Assignment cJustificationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJustificationSTRINGTerminalRuleCall_4_0 = (RuleCall)cJustificationAssignment_4.eContents().get(0);
		
		//TrueFalse:
		//	"@true_false" hideFromView="hide"? statement=STRING truthValue=BOOL justification=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"@true_false" hideFromView="hide"? statement=STRING truthValue=BOOL justification=STRING?
		public Group getGroup() { return cGroup; }

		//"@true_false"
		public Keyword getTrue_falseKeyword_0() { return cTrue_falseKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//statement=STRING
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//STRING
		public RuleCall getStatementSTRINGTerminalRuleCall_2_0() { return cStatementSTRINGTerminalRuleCall_2_0; }

		//truthValue=BOOL
		public Assignment getTruthValueAssignment_3() { return cTruthValueAssignment_3; }

		//BOOL
		public RuleCall getTruthValueBOOLTerminalRuleCall_3_0() { return cTruthValueBOOLTerminalRuleCall_3_0; }

		//justification=STRING?
		public Assignment getJustificationAssignment_4() { return cJustificationAssignment_4; }

		//STRING
		public RuleCall getJustificationSTRINGTerminalRuleCall_4_0() { return cJustificationSTRINGTerminalRuleCall_4_0; }
	}

	public class ChemEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChemEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChem_equationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactantsSTRINGTerminalRuleCall_4_0 = (RuleCall)cReactantsAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProducesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProducesSTRINGTerminalRuleCall_6_0 = (RuleCall)cProducesAssignment_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cProductsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProductsSTRINGTerminalRuleCall_8_0 = (RuleCall)cProductsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ChemEquation:
		//	"@chem_equation" hideFromView="hide"? description=STRING? "{" reactants=STRING ">" produces=STRING? ">"
		//	products=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"@chem_equation" hideFromView="hide"? description=STRING? "{" reactants=STRING ">" produces=STRING? ">" products=STRING
		//"}"
		public Group getGroup() { return cGroup; }

		//"@chem_equation"
		public Keyword getChem_equationKeyword_0() { return cChem_equationKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//reactants=STRING
		public Assignment getReactantsAssignment_4() { return cReactantsAssignment_4; }

		//STRING
		public RuleCall getReactantsSTRINGTerminalRuleCall_4_0() { return cReactantsSTRINGTerminalRuleCall_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//produces=STRING?
		public Assignment getProducesAssignment_6() { return cProducesAssignment_6; }

		//STRING
		public RuleCall getProducesSTRINGTerminalRuleCall_6_0() { return cProducesSTRINGTerminalRuleCall_6_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }

		//products=STRING
		public Assignment getProductsAssignment_8() { return cProductsAssignment_8; }

		//STRING
		public RuleCall getProductsSTRINGTerminalRuleCall_8_0() { return cProductsSTRINGTerminalRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ChemCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChemCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChem_compoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cSymbolAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSymbolSTRINGTerminalRuleCall_2_0 = (RuleCall)cSymbolAssignment_2.eContents().get(0);
		private final Assignment cChemicalNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChemicalNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cChemicalNameAssignment_3.eContents().get(0);
		private final Assignment cCommonNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommonNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cCommonNameAssignment_4.eContents().get(0);
		
		//ChemCompound:
		//	"@chem_compound" hideFromView="hide"? symbol=STRING chemicalName=STRING commonName=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"@chem_compound" hideFromView="hide"? symbol=STRING chemicalName=STRING commonName=STRING?
		public Group getGroup() { return cGroup; }

		//"@chem_compound"
		public Keyword getChem_compoundKeyword_0() { return cChem_compoundKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//symbol=STRING
		public Assignment getSymbolAssignment_2() { return cSymbolAssignment_2; }

		//STRING
		public RuleCall getSymbolSTRINGTerminalRuleCall_2_0() { return cSymbolSTRINGTerminalRuleCall_2_0; }

		//chemicalName=STRING
		public Assignment getChemicalNameAssignment_3() { return cChemicalNameAssignment_3; }

		//STRING
		public RuleCall getChemicalNameSTRINGTerminalRuleCall_3_0() { return cChemicalNameSTRINGTerminalRuleCall_3_0; }

		//commonName=STRING?
		public Assignment getCommonNameAssignment_4() { return cCommonNameAssignment_4; }

		//STRING
		public RuleCall getCommonNameSTRINGTerminalRuleCall_4_0() { return cCommonNameSTRINGTerminalRuleCall_4_0; }
	}

	public class SpellbeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spellbee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpellbeeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cWordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWordSTRINGTerminalRuleCall_2_0 = (RuleCall)cWordAssignment_2.eContents().get(0);
		
		//Spellbee:
		//	"@spellbee" hideFromView="hide"? word=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@spellbee" hideFromView="hide"? word=STRING
		public Group getGroup() { return cGroup; }

		//"@spellbee"
		public Keyword getSpellbeeKeyword_0() { return cSpellbeeKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//word=STRING
		public Assignment getWordAssignment_2() { return cWordAssignment_2; }

		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_2_0() { return cWordSTRINGTerminalRuleCall_2_0; }
	}

	public class ImageLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImage_labelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cCaptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCaptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cCaptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cImageNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cImageNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cImageNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cImageNameAssignment_5.eContents().get(0);
		private final Assignment cHotspotsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHotspotsHotSpotParserRuleCall_6_0 = (RuleCall)cHotspotsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cHotspotsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cHotspotsHotSpotParserRuleCall_7_1_0 = (RuleCall)cHotspotsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ImageLabel:
		//	"@image_label" hideFromView="hide"? caption=STRING? "{" "imageName" imageName=STRING hotspots+=HotSpot (","
		//	hotspots+=HotSpot)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"@image_label" hideFromView="hide"? caption=STRING? "{" "imageName" imageName=STRING hotspots+=HotSpot (","
		//hotspots+=HotSpot)* "}"
		public Group getGroup() { return cGroup; }

		//"@image_label"
		public Keyword getImage_labelKeyword_0() { return cImage_labelKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//caption=STRING?
		public Assignment getCaptionAssignment_2() { return cCaptionAssignment_2; }

		//STRING
		public RuleCall getCaptionSTRINGTerminalRuleCall_2_0() { return cCaptionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"imageName"
		public Keyword getImageNameKeyword_4() { return cImageNameKeyword_4; }

		//imageName=STRING
		public Assignment getImageNameAssignment_5() { return cImageNameAssignment_5; }

		//STRING
		public RuleCall getImageNameSTRINGTerminalRuleCall_5_0() { return cImageNameSTRINGTerminalRuleCall_5_0; }

		//hotspots+=HotSpot
		public Assignment getHotspotsAssignment_6() { return cHotspotsAssignment_6; }

		//HotSpot
		public RuleCall getHotspotsHotSpotParserRuleCall_6_0() { return cHotspotsHotSpotParserRuleCall_6_0; }

		//("," hotspots+=HotSpot)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//hotspots+=HotSpot
		public Assignment getHotspotsAssignment_7_1() { return cHotspotsAssignment_7_1; }

		//HotSpot
		public RuleCall getHotspotsHotSpotParserRuleCall_7_1_0() { return cHotspotsHotSpotParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class HotSpotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HotSpot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXINTTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		//HotSpot:
		//	x=INT "," y=INT "=" label=STRING;
		@Override public ParserRule getRule() { return rule; }

		//x=INT "," y=INT "=" label=STRING
		public Group getGroup() { return cGroup; }

		//x=INT
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//INT
		public RuleCall getXINTTerminalRuleCall_0_0() { return cXINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }

		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//label=STRING
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cEquationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEquationSTRINGTerminalRuleCall_2_0 = (RuleCall)cEquationAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cWhereKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSymbolsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSymbolsEqSymbolParserRuleCall_6_0 = (RuleCall)cSymbolsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSymbolsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSymbolsEqSymbolParserRuleCall_7_1_0 = (RuleCall)cSymbolsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Equation:
		//	"@equation" hideFromView="hide"? equation=STRING "{" description=STRING? "where" symbols+=EqSymbol (","
		//	symbols+=EqSymbol)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"@equation" hideFromView="hide"? equation=STRING "{" description=STRING? "where" symbols+=EqSymbol (","
		//symbols+=EqSymbol)* "}"
		public Group getGroup() { return cGroup; }

		//"@equation"
		public Keyword getEquationKeyword_0() { return cEquationKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//equation=STRING
		public Assignment getEquationAssignment_2() { return cEquationAssignment_2; }

		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_2_0() { return cEquationSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//description=STRING?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//"where"
		public Keyword getWhereKeyword_5() { return cWhereKeyword_5; }

		//symbols+=EqSymbol
		public Assignment getSymbolsAssignment_6() { return cSymbolsAssignment_6; }

		//EqSymbol
		public RuleCall getSymbolsEqSymbolParserRuleCall_6_0() { return cSymbolsEqSymbolParserRuleCall_6_0; }

		//("," symbols+=EqSymbol)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//symbols+=EqSymbol
		public Assignment getSymbolsAssignment_7_1() { return cSymbolsAssignment_7_1; }

		//EqSymbol
		public RuleCall getSymbolsEqSymbolParserRuleCall_7_1_0() { return cSymbolsEqSymbolParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EqSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqSymbol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSymbolSTRINGTerminalRuleCall_0_0 = (RuleCall)cSymbolAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//EqSymbol:
		//	symbol=STRING "=" description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//symbol=STRING "=" description=STRING
		public Group getGroup() { return cGroup; }

		//symbol=STRING
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }

		//STRING
		public RuleCall getSymbolSTRINGTerminalRuleCall_0_0() { return cSymbolSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}

	public class RefToContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefToContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRtcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cContextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContextSTRINGTerminalRuleCall_4_0 = (RuleCall)cContextAssignment_4.eContents().get(0);
		private final Assignment cQuestionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuestionsQuestionAnswerParserRuleCall_5_0 = (RuleCall)cQuestionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RefToContext:
		//	"@rtc" hideFromView="hide"? "{" "context" context=STRING questions+=QuestionAnswer+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"@rtc" hideFromView="hide"? "{" "context" context=STRING questions+=QuestionAnswer+ "}"
		public Group getGroup() { return cGroup; }

		//"@rtc"
		public Keyword getRtcKeyword_0() { return cRtcKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"context"
		public Keyword getContextKeyword_3() { return cContextKeyword_3; }

		//context=STRING
		public Assignment getContextAssignment_4() { return cContextAssignment_4; }

		//STRING
		public RuleCall getContextSTRINGTerminalRuleCall_4_0() { return cContextSTRINGTerminalRuleCall_4_0; }

		//questions+=QuestionAnswer+
		public Assignment getQuestionsAssignment_5() { return cQuestionsAssignment_5; }

		//QuestionAnswer
		public RuleCall getQuestionsQuestionAnswerParserRuleCall_5_0() { return cQuestionsQuestionAnswerParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MultiChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulti_choiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHideFromViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cHideFromViewHideKeyword_1_0 = (Keyword)cHideFromViewAssignment_1.eContents().get(0);
		private final Assignment cQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_2_0 = (RuleCall)cQuestionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOptionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOptionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionsOptionParserRuleCall_6_0 = (RuleCall)cOptionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOptionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_7_1_0 = (RuleCall)cOptionsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumOptionsToShowKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cNumOptionsToShowAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNumOptionsToShowINTTerminalRuleCall_9_1_0 = (RuleCall)cNumOptionsToShowAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cNumOptionsPerRowKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNumOptionsPerRowAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNumOptionsPerRowINTTerminalRuleCall_10_1_0 = (RuleCall)cNumOptionsPerRowAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cExplanationKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cExplanationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cExplanationSTRINGTerminalRuleCall_11_1_0 = (RuleCall)cExplanationAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//MultiChoice:
		//	"@multi_choice" hideFromView="hide"? question=STRING "{" "@options" "{" options+=Option ("," options+=Option)* "}"
		//	("@numOptionsToShow" numOptionsToShow=INT)? ("@numOptionsPerRow" numOptionsPerRow=INT)? ("@explanation"
		//	explanation=STRING)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"@multi_choice" hideFromView="hide"? question=STRING "{" "@options" "{" options+=Option ("," options+=Option)* "}"
		//("@numOptionsToShow" numOptionsToShow=INT)? ("@numOptionsPerRow" numOptionsPerRow=INT)? ("@explanation"
		//explanation=STRING)? "}"
		public Group getGroup() { return cGroup; }

		//"@multi_choice"
		public Keyword getMulti_choiceKeyword_0() { return cMulti_choiceKeyword_0; }

		//hideFromView="hide"?
		public Assignment getHideFromViewAssignment_1() { return cHideFromViewAssignment_1; }

		//"hide"
		public Keyword getHideFromViewHideKeyword_1_0() { return cHideFromViewHideKeyword_1_0; }

		//question=STRING
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_2_0() { return cQuestionSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"@options"
		public Keyword getOptionsKeyword_4() { return cOptionsKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//options+=Option
		public Assignment getOptionsAssignment_6() { return cOptionsAssignment_6; }

		//Option
		public RuleCall getOptionsOptionParserRuleCall_6_0() { return cOptionsOptionParserRuleCall_6_0; }

		//("," options+=Option)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//options+=Option
		public Assignment getOptionsAssignment_7_1() { return cOptionsAssignment_7_1; }

		//Option
		public RuleCall getOptionsOptionParserRuleCall_7_1_0() { return cOptionsOptionParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//("@numOptionsToShow" numOptionsToShow=INT)?
		public Group getGroup_9() { return cGroup_9; }

		//"@numOptionsToShow"
		public Keyword getNumOptionsToShowKeyword_9_0() { return cNumOptionsToShowKeyword_9_0; }

		//numOptionsToShow=INT
		public Assignment getNumOptionsToShowAssignment_9_1() { return cNumOptionsToShowAssignment_9_1; }

		//INT
		public RuleCall getNumOptionsToShowINTTerminalRuleCall_9_1_0() { return cNumOptionsToShowINTTerminalRuleCall_9_1_0; }

		//("@numOptionsPerRow" numOptionsPerRow=INT)?
		public Group getGroup_10() { return cGroup_10; }

		//"@numOptionsPerRow"
		public Keyword getNumOptionsPerRowKeyword_10_0() { return cNumOptionsPerRowKeyword_10_0; }

		//numOptionsPerRow=INT
		public Assignment getNumOptionsPerRowAssignment_10_1() { return cNumOptionsPerRowAssignment_10_1; }

		//INT
		public RuleCall getNumOptionsPerRowINTTerminalRuleCall_10_1_0() { return cNumOptionsPerRowINTTerminalRuleCall_10_1_0; }

		//("@explanation" explanation=STRING)?
		public Group getGroup_11() { return cGroup_11; }

		//"@explanation"
		public Keyword getExplanationKeyword_11_0() { return cExplanationKeyword_11_0; }

		//explanation=STRING
		public Assignment getExplanationAssignment_11_1() { return cExplanationAssignment_11_1; }

		//STRING
		public RuleCall getExplanationSTRINGTerminalRuleCall_11_1_0() { return cExplanationSTRINGTerminalRuleCall_11_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptionValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cOptionValueAssignment_0.eContents().get(0);
		private final Assignment cCorrectOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCorrectOptionCorrectKeyword_1_0 = (Keyword)cCorrectOptionAssignment_1.eContents().get(0);
		
		//Option:
		//	optionValue=STRING correctOption="correct"?;
		@Override public ParserRule getRule() { return rule; }

		//optionValue=STRING correctOption="correct"?
		public Group getGroup() { return cGroup; }

		//optionValue=STRING
		public Assignment getOptionValueAssignment_0() { return cOptionValueAssignment_0; }

		//STRING
		public RuleCall getOptionValueSTRINGTerminalRuleCall_0_0() { return cOptionValueSTRINGTerminalRuleCall_0_0; }

		//correctOption="correct"?
		public Assignment getCorrectOptionAssignment_1() { return cCorrectOptionAssignment_1; }

		//"correct"
		public Keyword getCorrectOptionCorrectKeyword_1_0() { return cCorrectOptionCorrectKeyword_1_0; }
	}

	public class CMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CMap:
		//	"cmap" "{" content=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"cmap" "{" content=STRING "}"
		public Group getGroup() { return cGroup; }

		//"cmap"
		public Keyword getCmapKeyword_0() { return cCmapKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final JoveNotesElements pJoveNotes;
	private final ProcessingHintsElements pProcessingHints;
	private final ChapterDetailsElements pChapterDetails;
	private final NotesElementElements pNotesElement;
	private final WordMeaningElements pWordMeaning;
	private final QuestionAnswerElements pQuestionAnswer;
	private final FIBElements pFIB;
	private final DefinitionElements pDefinition;
	private final CharacterElements pCharacter;
	private final TeacherNoteElements pTeacherNote;
	private final MatchingElements pMatching;
	private final MatchPairElements pMatchPair;
	private final EventElements pEvent;
	private final TrueFalseElements pTrueFalse;
	private final ChemEquationElements pChemEquation;
	private final ChemCompoundElements pChemCompound;
	private final SpellbeeElements pSpellbee;
	private final ImageLabelElements pImageLabel;
	private final HotSpotElements pHotSpot;
	private final EquationElements pEquation;
	private final EqSymbolElements pEqSymbol;
	private final RefToContextElements pRefToContext;
	private final MultiChoiceElements pMultiChoice;
	private final OptionElements pOption;
	private final CMapElements pCMap;
	private final TerminalRule tBOOL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JoveNotesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJoveNotes = new JoveNotesElements();
		this.pProcessingHints = new ProcessingHintsElements();
		this.pChapterDetails = new ChapterDetailsElements();
		this.pNotesElement = new NotesElementElements();
		this.pWordMeaning = new WordMeaningElements();
		this.pQuestionAnswer = new QuestionAnswerElements();
		this.pFIB = new FIBElements();
		this.pDefinition = new DefinitionElements();
		this.pCharacter = new CharacterElements();
		this.pTeacherNote = new TeacherNoteElements();
		this.pMatching = new MatchingElements();
		this.pMatchPair = new MatchPairElements();
		this.pEvent = new EventElements();
		this.pTrueFalse = new TrueFalseElements();
		this.pChemEquation = new ChemEquationElements();
		this.pChemCompound = new ChemCompoundElements();
		this.pSpellbee = new SpellbeeElements();
		this.pImageLabel = new ImageLabelElements();
		this.pHotSpot = new HotSpotElements();
		this.pEquation = new EquationElements();
		this.pEqSymbol = new EqSymbolElements();
		this.pRefToContext = new RefToContextElements();
		this.pMultiChoice = new MultiChoiceElements();
		this.pOption = new OptionElements();
		this.pCMap = new CMapElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sandy.xtext.JoveNotes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JoveNotes:
	//	processingHints=ProcessingHints chapterDetails=ChapterDetails notesElements+=NotesElement*;
	public JoveNotesElements getJoveNotesAccess() {
		return pJoveNotes;
	}
	
	public ParserRule getJoveNotesRule() {
		return getJoveNotesAccess().getRule();
	}

	//ProcessingHints:
	//	{ProcessingHints} skipGeneration="@skip_generation"? skipGenerationInProduction="@skip_generation_in_production"?;
	public ProcessingHintsElements getProcessingHintsAccess() {
		return pProcessingHints;
	}
	
	public ParserRule getProcessingHintsRule() {
		return getProcessingHintsAccess().getRule();
	}

	//ChapterDetails:
	//	testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
	//	"chapterName" chapterName=STRING;
	public ChapterDetailsElements getChapterDetailsAccess() {
		return pChapterDetails;
	}
	
	public ParserRule getChapterDetailsRule() {
		return getChapterDetailsAccess().getRule();
	}

	//NotesElement:
	//	WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse |
	//	ChemEquation | ChemCompound | Spellbee | ImageLabel | Equation | RefToContext | MultiChoice;
	public NotesElementElements getNotesElementAccess() {
		return pNotesElement;
	}
	
	public ParserRule getNotesElementRule() {
		return getNotesElementAccess().getRule();
	}

	//WordMeaning:
	//	"@wm" hideFromView="hide"? word=STRING meaning=STRING;
	public WordMeaningElements getWordMeaningAccess() {
		return pWordMeaning;
	}
	
	public ParserRule getWordMeaningRule() {
		return getWordMeaningAccess().getRule();
	}

	//QuestionAnswer:
	//	"@qa" hideFromView="hide"? question=STRING answerParts+=STRING+ cmap=CMap?;
	public QuestionAnswerElements getQuestionAnswerAccess() {
		return pQuestionAnswer;
	}
	
	public ParserRule getQuestionAnswerRule() {
		return getQuestionAnswerAccess().getRule();
	}

	//FIB:
	//	"@fib" hideFromView="hide"? question=STRING answers+=STRING+;
	public FIBElements getFIBAccess() {
		return pFIB;
	}
	
	public ParserRule getFIBRule() {
		return getFIBAccess().getRule();
	}

	//Definition:
	//	"@definition" hideFromView="hide"? term=STRING definition=STRING cmap=CMap?;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Character:
	//	"@character" hideFromView="hide"? character=STRING estimate=STRING cmap=CMap?;
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//TeacherNote:
	//	"@tn" hideFromView="hide"? caption=STRING? note=STRING cmap=CMap?;
	public TeacherNoteElements getTeacherNoteAccess() {
		return pTeacherNote;
	}
	
	public ParserRule getTeacherNoteRule() {
		return getTeacherNoteAccess().getRule();
	}

	//Matching:
	//	"@match" hideFromView="hide"? skipReverseQuestion="skip_reverse_question"? question=STRING? "{" pairs+=MatchPair+ "}";
	public MatchingElements getMatchingAccess() {
		return pMatching;
	}
	
	public ParserRule getMatchingRule() {
		return getMatchingAccess().getRule();
	}

	//MatchPair:
	//	matchQuestion=STRING "=" matchAnswer=STRING;
	public MatchPairElements getMatchPairAccess() {
		return pMatchPair;
	}
	
	public ParserRule getMatchPairRule() {
		return getMatchPairAccess().getRule();
	}

	//Event:
	//	"@event" hideFromView="hide"? event=STRING time=STRING;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//TrueFalse:
	//	"@true_false" hideFromView="hide"? statement=STRING truthValue=BOOL justification=STRING?;
	public TrueFalseElements getTrueFalseAccess() {
		return pTrueFalse;
	}
	
	public ParserRule getTrueFalseRule() {
		return getTrueFalseAccess().getRule();
	}

	//ChemEquation:
	//	"@chem_equation" hideFromView="hide"? description=STRING? "{" reactants=STRING ">" produces=STRING? ">"
	//	products=STRING "}";
	public ChemEquationElements getChemEquationAccess() {
		return pChemEquation;
	}
	
	public ParserRule getChemEquationRule() {
		return getChemEquationAccess().getRule();
	}

	//ChemCompound:
	//	"@chem_compound" hideFromView="hide"? symbol=STRING chemicalName=STRING commonName=STRING?;
	public ChemCompoundElements getChemCompoundAccess() {
		return pChemCompound;
	}
	
	public ParserRule getChemCompoundRule() {
		return getChemCompoundAccess().getRule();
	}

	//Spellbee:
	//	"@spellbee" hideFromView="hide"? word=STRING;
	public SpellbeeElements getSpellbeeAccess() {
		return pSpellbee;
	}
	
	public ParserRule getSpellbeeRule() {
		return getSpellbeeAccess().getRule();
	}

	//ImageLabel:
	//	"@image_label" hideFromView="hide"? caption=STRING? "{" "imageName" imageName=STRING hotspots+=HotSpot (","
	//	hotspots+=HotSpot)* "}";
	public ImageLabelElements getImageLabelAccess() {
		return pImageLabel;
	}
	
	public ParserRule getImageLabelRule() {
		return getImageLabelAccess().getRule();
	}

	//HotSpot:
	//	x=INT "," y=INT "=" label=STRING;
	public HotSpotElements getHotSpotAccess() {
		return pHotSpot;
	}
	
	public ParserRule getHotSpotRule() {
		return getHotSpotAccess().getRule();
	}

	//Equation:
	//	"@equation" hideFromView="hide"? equation=STRING "{" description=STRING? "where" symbols+=EqSymbol (","
	//	symbols+=EqSymbol)* "}";
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//EqSymbol:
	//	symbol=STRING "=" description=STRING;
	public EqSymbolElements getEqSymbolAccess() {
		return pEqSymbol;
	}
	
	public ParserRule getEqSymbolRule() {
		return getEqSymbolAccess().getRule();
	}

	//RefToContext:
	//	"@rtc" hideFromView="hide"? "{" "context" context=STRING questions+=QuestionAnswer+ "}";
	public RefToContextElements getRefToContextAccess() {
		return pRefToContext;
	}
	
	public ParserRule getRefToContextRule() {
		return getRefToContextAccess().getRule();
	}

	//MultiChoice:
	//	"@multi_choice" hideFromView="hide"? question=STRING "{" "@options" "{" options+=Option ("," options+=Option)* "}"
	//	("@numOptionsToShow" numOptionsToShow=INT)? ("@numOptionsPerRow" numOptionsPerRow=INT)? ("@explanation"
	//	explanation=STRING)? "}";
	public MultiChoiceElements getMultiChoiceAccess() {
		return pMultiChoice;
	}
	
	public ParserRule getMultiChoiceRule() {
		return getMultiChoiceAccess().getRule();
	}

	//Option:
	//	optionValue=STRING correctOption="correct"?;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//CMap:
	//	"cmap" "{" content=STRING "}";
	public CMapElements getCMapAccess() {
		return pCMap;
	}
	
	public ParserRule getCMapRule() {
		return getCMapAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
