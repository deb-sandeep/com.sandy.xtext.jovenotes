/*
 * generated by Xtext
 */
package com.sandy.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JoveNotesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JoveNotesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoveNotes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessingHintsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessingHintsProcessingHintsParserRuleCall_0_0 = (RuleCall)cProcessingHintsAssignment_0.eContents().get(0);
		private final Assignment cChapterDetailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChapterDetailsChapterDetailsParserRuleCall_1_0 = (RuleCall)cChapterDetailsAssignment_1.eContents().get(0);
		private final Assignment cNotesElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNotesElementsNotesElementParserRuleCall_2_0 = (RuleCall)cNotesElementsAssignment_2.eContents().get(0);
		
		//JoveNotes:
		//	processingHints=ProcessingHints? chapterDetails=ChapterDetails notesElements+=NotesElement*;
		@Override public ParserRule getRule() { return rule; }

		//processingHints=ProcessingHints? chapterDetails=ChapterDetails notesElements+=NotesElement*
		public Group getGroup() { return cGroup; }

		//processingHints=ProcessingHints?
		public Assignment getProcessingHintsAssignment_0() { return cProcessingHintsAssignment_0; }

		//ProcessingHints
		public RuleCall getProcessingHintsProcessingHintsParserRuleCall_0_0() { return cProcessingHintsProcessingHintsParserRuleCall_0_0; }

		//chapterDetails=ChapterDetails
		public Assignment getChapterDetailsAssignment_1() { return cChapterDetailsAssignment_1; }

		//ChapterDetails
		public RuleCall getChapterDetailsChapterDetailsParserRuleCall_1_0() { return cChapterDetailsChapterDetailsParserRuleCall_1_0; }

		//notesElements+=NotesElement*
		public Assignment getNotesElementsAssignment_2() { return cNotesElementsAssignment_2; }

		//NotesElement
		public RuleCall getNotesElementsNotesElementParserRuleCall_2_0() { return cNotesElementsNotesElementParserRuleCall_2_0; }
	}

	public class ProcessingHintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessingHints");
		private final Assignment cSkipGenerationAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSkipGenerationSkip_generationKeyword_0 = (Keyword)cSkipGenerationAssignment.eContents().get(0);
		
		//ProcessingHints:
		//	skipGeneration="@skip_generation";
		@Override public ParserRule getRule() { return rule; }

		//skipGeneration="@skip_generation"
		public Assignment getSkipGenerationAssignment() { return cSkipGenerationAssignment; }

		//"@skip_generation"
		public Keyword getSkipGenerationSkip_generationKeyword_0() { return cSkipGenerationSkip_generationKeyword_0; }
	}

	public class ChapterDetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChapterDetails");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTestPaperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTestPaperTest_paperKeyword_0_0 = (Keyword)cTestPaperAssignment_0.eContents().get(0);
		private final Keyword cSubjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubjectNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubjectNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cSubjectNameAssignment_2.eContents().get(0);
		private final Keyword cChapterNumberKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChapterNumberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChapterNumberINTTerminalRuleCall_4_0 = (RuleCall)cChapterNumberAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubChapterNumberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubChapterNumberINTTerminalRuleCall_6_0 = (RuleCall)cSubChapterNumberAssignment_6.eContents().get(0);
		private final Keyword cChapterNameKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cChapterNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cChapterNameSTRINGTerminalRuleCall_8_0 = (RuleCall)cChapterNameAssignment_8.eContents().get(0);
		
		//ChapterDetails:
		//	testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
		//	"chapterName" chapterName=STRING;
		@Override public ParserRule getRule() { return rule; }

		//testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
		//"chapterName" chapterName=STRING
		public Group getGroup() { return cGroup; }

		//testPaper="@test_paper"?
		public Assignment getTestPaperAssignment_0() { return cTestPaperAssignment_0; }

		//"@test_paper"
		public Keyword getTestPaperTest_paperKeyword_0_0() { return cTestPaperTest_paperKeyword_0_0; }

		//"subject"
		public Keyword getSubjectKeyword_1() { return cSubjectKeyword_1; }

		//subjectName=STRING
		public Assignment getSubjectNameAssignment_2() { return cSubjectNameAssignment_2; }

		//STRING
		public RuleCall getSubjectNameSTRINGTerminalRuleCall_2_0() { return cSubjectNameSTRINGTerminalRuleCall_2_0; }

		//"chapterNumber"
		public Keyword getChapterNumberKeyword_3() { return cChapterNumberKeyword_3; }

		//chapterNumber=INT
		public Assignment getChapterNumberAssignment_4() { return cChapterNumberAssignment_4; }

		//INT
		public RuleCall getChapterNumberINTTerminalRuleCall_4_0() { return cChapterNumberINTTerminalRuleCall_4_0; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//subChapterNumber=INT
		public Assignment getSubChapterNumberAssignment_6() { return cSubChapterNumberAssignment_6; }

		//INT
		public RuleCall getSubChapterNumberINTTerminalRuleCall_6_0() { return cSubChapterNumberINTTerminalRuleCall_6_0; }

		//"chapterName"
		public Keyword getChapterNameKeyword_7() { return cChapterNameKeyword_7; }

		//chapterName=STRING
		public Assignment getChapterNameAssignment_8() { return cChapterNameAssignment_8; }

		//STRING
		public RuleCall getChapterNameSTRINGTerminalRuleCall_8_0() { return cChapterNameSTRINGTerminalRuleCall_8_0; }
	}

	public class NotesElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotesElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordMeaningParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFIBParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCharacterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTeacherNoteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMatchingParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEventParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTrueFalseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cChemEquationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cChemCompoundParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSpellbeeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cImageLabelParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEquationParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRefToContextParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//NotesElement:
		//	WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse |
		//	ChemEquation | ChemCompound | Spellbee | ImageLabel | Equation | RefToContext;
		@Override public ParserRule getRule() { return rule; }

		//WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse | ChemEquation
		//| ChemCompound | Spellbee | ImageLabel | Equation | RefToContext
		public Alternatives getAlternatives() { return cAlternatives; }

		//WordMeaning
		public RuleCall getWordMeaningParserRuleCall_0() { return cWordMeaningParserRuleCall_0; }

		//QuestionAnswer
		public RuleCall getQuestionAnswerParserRuleCall_1() { return cQuestionAnswerParserRuleCall_1; }

		//FIB
		public RuleCall getFIBParserRuleCall_2() { return cFIBParserRuleCall_2; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_3() { return cDefinitionParserRuleCall_3; }

		//Character
		public RuleCall getCharacterParserRuleCall_4() { return cCharacterParserRuleCall_4; }

		//TeacherNote
		public RuleCall getTeacherNoteParserRuleCall_5() { return cTeacherNoteParserRuleCall_5; }

		//Matching
		public RuleCall getMatchingParserRuleCall_6() { return cMatchingParserRuleCall_6; }

		//Event
		public RuleCall getEventParserRuleCall_7() { return cEventParserRuleCall_7; }

		//TrueFalse
		public RuleCall getTrueFalseParserRuleCall_8() { return cTrueFalseParserRuleCall_8; }

		//ChemEquation
		public RuleCall getChemEquationParserRuleCall_9() { return cChemEquationParserRuleCall_9; }

		//ChemCompound
		public RuleCall getChemCompoundParserRuleCall_10() { return cChemCompoundParserRuleCall_10; }

		//Spellbee
		public RuleCall getSpellbeeParserRuleCall_11() { return cSpellbeeParserRuleCall_11; }

		//ImageLabel
		public RuleCall getImageLabelParserRuleCall_12() { return cImageLabelParserRuleCall_12; }

		//Equation
		public RuleCall getEquationParserRuleCall_13() { return cEquationParserRuleCall_13; }

		//RefToContext
		public RuleCall getRefToContextParserRuleCall_14() { return cRefToContextParserRuleCall_14; }
	}

	public class WordMeaningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordMeaning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordSTRINGTerminalRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		private final Assignment cMeaningAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeaningSTRINGTerminalRuleCall_2_0 = (RuleCall)cMeaningAssignment_2.eContents().get(0);
		
		//WordMeaning:
		//	"@wm" word=STRING meaning=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@wm" word=STRING meaning=STRING
		public Group getGroup() { return cGroup; }

		//"@wm"
		public Keyword getWmKeyword_0() { return cWmKeyword_0; }

		//word=STRING
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }

		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_1_0() { return cWordSTRINGTerminalRuleCall_1_0; }

		//meaning=STRING
		public Assignment getMeaningAssignment_2() { return cMeaningAssignment_2; }

		//STRING
		public RuleCall getMeaningSTRINGTerminalRuleCall_2_0() { return cMeaningSTRINGTerminalRuleCall_2_0; }
	}

	public class QuestionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Assignment cCmapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmapCMapParserRuleCall_3_0 = (RuleCall)cCmapAssignment_3.eContents().get(0);
		
		//QuestionAnswer:
		//	"@qa" question=STRING answer=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@qa" question=STRING answer=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@qa"
		public Keyword getQaKeyword_0() { return cQaKeyword_0; }

		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }

		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }

		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_3() { return cCmapAssignment_3; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_3_0() { return cCmapCMapParserRuleCall_3_0; }
	}

	public class FIBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFibKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Assignment cAnswersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswersSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswersAssignment_2.eContents().get(0);
		
		//FIB:
		//	"@fib" question=STRING answers+=STRING+;
		@Override public ParserRule getRule() { return rule; }

		//"@fib" question=STRING answers+=STRING+
		public Group getGroup() { return cGroup; }

		//"@fib"
		public Keyword getFibKeyword_0() { return cFibKeyword_0; }

		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }

		//answers+=STRING+
		public Assignment getAnswersAssignment_2() { return cAnswersAssignment_2; }

		//STRING
		public RuleCall getAnswersSTRINGTerminalRuleCall_2_0() { return cAnswersSTRINGTerminalRuleCall_2_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermSTRINGTerminalRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDefinitionAssignment_2.eContents().get(0);
		private final Assignment cCmapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmapCMapParserRuleCall_3_0 = (RuleCall)cCmapAssignment_3.eContents().get(0);
		
		//Definition:
		//	"@definition" term=STRING definition=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@definition" term=STRING definition=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@definition"
		public Keyword getDefinitionKeyword_0() { return cDefinitionKeyword_0; }

		//term=STRING
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//STRING
		public RuleCall getTermSTRINGTerminalRuleCall_1_0() { return cTermSTRINGTerminalRuleCall_1_0; }

		//definition=STRING
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//STRING
		public RuleCall getDefinitionSTRINGTerminalRuleCall_2_0() { return cDefinitionSTRINGTerminalRuleCall_2_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_3() { return cCmapAssignment_3; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_3_0() { return cCmapCMapParserRuleCall_3_0; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharacterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharacterSTRINGTerminalRuleCall_1_0 = (RuleCall)cCharacterAssignment_1.eContents().get(0);
		private final Assignment cEstimateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEstimateSTRINGTerminalRuleCall_2_0 = (RuleCall)cEstimateAssignment_2.eContents().get(0);
		private final Assignment cCmapAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmapCMapParserRuleCall_3_0 = (RuleCall)cCmapAssignment_3.eContents().get(0);
		
		//Character:
		//	"@character" character=STRING estimate=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@character" character=STRING estimate=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@character"
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }

		//character=STRING
		public Assignment getCharacterAssignment_1() { return cCharacterAssignment_1; }

		//STRING
		public RuleCall getCharacterSTRINGTerminalRuleCall_1_0() { return cCharacterSTRINGTerminalRuleCall_1_0; }

		//estimate=STRING
		public Assignment getEstimateAssignment_2() { return cEstimateAssignment_2; }

		//STRING
		public RuleCall getEstimateSTRINGTerminalRuleCall_2_0() { return cEstimateSTRINGTerminalRuleCall_2_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_3() { return cCmapAssignment_3; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_3_0() { return cCmapCMapParserRuleCall_3_0; }
	}

	public class TeacherNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TeacherNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteSTRINGTerminalRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		private final Assignment cCmapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCmapCMapParserRuleCall_2_0 = (RuleCall)cCmapAssignment_2.eContents().get(0);
		
		//TeacherNote:
		//	"@tn" note=STRING cmap=CMap?;
		@Override public ParserRule getRule() { return rule; }

		//"@tn" note=STRING cmap=CMap?
		public Group getGroup() { return cGroup; }

		//"@tn"
		public Keyword getTnKeyword_0() { return cTnKeyword_0; }

		//note=STRING
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }

		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_1_0() { return cNoteSTRINGTerminalRuleCall_1_0; }

		//cmap=CMap?
		public Assignment getCmapAssignment_2() { return cCmapAssignment_2; }

		//CMap
		public RuleCall getCmapCMapParserRuleCall_2_0() { return cCmapCMapParserRuleCall_2_0; }
	}

	public class MatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPairsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairsMatchPairParserRuleCall_3_0 = (RuleCall)cPairsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Matching:
		//	"@match" question=STRING "{" pairs+=MatchPair+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"@match" question=STRING "{" pairs+=MatchPair+ "}"
		public Group getGroup() { return cGroup; }

		//"@match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pairs+=MatchPair+
		public Assignment getPairsAssignment_3() { return cPairsAssignment_3; }

		//MatchPair
		public RuleCall getPairsMatchPairParserRuleCall_3_0() { return cPairsMatchPairParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MatchPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMatchQuestionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMatchQuestionSTRINGTerminalRuleCall_0_0 = (RuleCall)cMatchQuestionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMatchAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMatchAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cMatchAnswerAssignment_2.eContents().get(0);
		
		//MatchPair:
		//	matchQuestion=STRING "=" matchAnswer=STRING;
		@Override public ParserRule getRule() { return rule; }

		//matchQuestion=STRING "=" matchAnswer=STRING
		public Group getGroup() { return cGroup; }

		//matchQuestion=STRING
		public Assignment getMatchQuestionAssignment_0() { return cMatchQuestionAssignment_0; }

		//STRING
		public RuleCall getMatchQuestionSTRINGTerminalRuleCall_0_0() { return cMatchQuestionSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//matchAnswer=STRING
		public Assignment getMatchAnswerAssignment_2() { return cMatchAnswerAssignment_2; }

		//STRING
		public RuleCall getMatchAnswerSTRINGTerminalRuleCall_2_0() { return cMatchAnswerSTRINGTerminalRuleCall_2_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventSTRINGTerminalRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeSTRINGTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		
		//Event:
		//	"@event" event=STRING time=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@event" event=STRING time=STRING
		public Group getGroup() { return cGroup; }

		//"@event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//event=STRING
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//STRING
		public RuleCall getEventSTRINGTerminalRuleCall_1_0() { return cEventSTRINGTerminalRuleCall_1_0; }

		//time=STRING
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }

		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_2_0() { return cTimeSTRINGTerminalRuleCall_2_0; }
	}

	public class TrueFalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrueFalse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrue_falseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementSTRINGTerminalRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Assignment cTruthValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTruthValueBOOLTerminalRuleCall_2_0 = (RuleCall)cTruthValueAssignment_2.eContents().get(0);
		private final Assignment cJustificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJustificationSTRINGTerminalRuleCall_3_0 = (RuleCall)cJustificationAssignment_3.eContents().get(0);
		
		//TrueFalse:
		//	"@true_false" statement=STRING truthValue=BOOL justification=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"@true_false" statement=STRING truthValue=BOOL justification=STRING?
		public Group getGroup() { return cGroup; }

		//"@true_false"
		public Keyword getTrue_falseKeyword_0() { return cTrue_falseKeyword_0; }

		//statement=STRING
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//STRING
		public RuleCall getStatementSTRINGTerminalRuleCall_1_0() { return cStatementSTRINGTerminalRuleCall_1_0; }

		//truthValue=BOOL
		public Assignment getTruthValueAssignment_2() { return cTruthValueAssignment_2; }

		//BOOL
		public RuleCall getTruthValueBOOLTerminalRuleCall_2_0() { return cTruthValueBOOLTerminalRuleCall_2_0; }

		//justification=STRING?
		public Assignment getJustificationAssignment_3() { return cJustificationAssignment_3; }

		//STRING
		public RuleCall getJustificationSTRINGTerminalRuleCall_3_0() { return cJustificationSTRINGTerminalRuleCall_3_0; }
	}

	public class ChemEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChemEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChem_equationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEquationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquationSTRINGTerminalRuleCall_1_0 = (RuleCall)cEquationAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesSTRINGTerminalRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//ChemEquation:
		//	"@chem_equation" equation=STRING description=STRING notes=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@chem_equation" equation=STRING description=STRING notes=STRING
		public Group getGroup() { return cGroup; }

		//"@chem_equation"
		public Keyword getChem_equationKeyword_0() { return cChem_equationKeyword_0; }

		//equation=STRING
		public Assignment getEquationAssignment_1() { return cEquationAssignment_1; }

		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_1_0() { return cEquationSTRINGTerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//notes=STRING
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }

		//STRING
		public RuleCall getNotesSTRINGTerminalRuleCall_3_0() { return cNotesSTRINGTerminalRuleCall_3_0; }
	}

	public class ChemCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChemCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChem_compoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbolSTRINGTerminalRuleCall_1_0 = (RuleCall)cSymbolAssignment_1.eContents().get(0);
		private final Assignment cChemicalNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChemicalNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cChemicalNameAssignment_2.eContents().get(0);
		private final Assignment cCommonNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommonNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cCommonNameAssignment_3.eContents().get(0);
		
		//ChemCompound:
		//	"@chem_compound" symbol=STRING chemicalName=STRING commonName=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@chem_compound" symbol=STRING chemicalName=STRING commonName=STRING
		public Group getGroup() { return cGroup; }

		//"@chem_compound"
		public Keyword getChem_compoundKeyword_0() { return cChem_compoundKeyword_0; }

		//symbol=STRING
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }

		//STRING
		public RuleCall getSymbolSTRINGTerminalRuleCall_1_0() { return cSymbolSTRINGTerminalRuleCall_1_0; }

		//chemicalName=STRING
		public Assignment getChemicalNameAssignment_2() { return cChemicalNameAssignment_2; }

		//STRING
		public RuleCall getChemicalNameSTRINGTerminalRuleCall_2_0() { return cChemicalNameSTRINGTerminalRuleCall_2_0; }

		//commonName=STRING
		public Assignment getCommonNameAssignment_3() { return cCommonNameAssignment_3; }

		//STRING
		public RuleCall getCommonNameSTRINGTerminalRuleCall_3_0() { return cCommonNameSTRINGTerminalRuleCall_3_0; }
	}

	public class SpellbeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spellbee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpellbeeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWordSTRINGTerminalRuleCall_1_0 = (RuleCall)cWordAssignment_1.eContents().get(0);
		
		//Spellbee:
		//	"@spellbee" word=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"@spellbee" word=STRING
		public Group getGroup() { return cGroup; }

		//"@spellbee"
		public Keyword getSpellbeeKeyword_0() { return cSpellbeeKeyword_0; }

		//word=STRING
		public Assignment getWordAssignment_1() { return cWordAssignment_1; }

		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_1_0() { return cWordSTRINGTerminalRuleCall_1_0; }
	}

	public class ImageLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImage_labelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cCaptionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cImageNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImageNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImageNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cImageNameAssignment_4.eContents().get(0);
		private final Assignment cHotspotsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHotspotsHotSpotParserRuleCall_5_0 = (RuleCall)cHotspotsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHotspotsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHotspotsHotSpotParserRuleCall_6_1_0 = (RuleCall)cHotspotsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ImageLabel:
		//	"@image_label" caption=STRING "{" "imageName" imageName=STRING hotspots+=HotSpot ("," hotspots+=HotSpot)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"@image_label" caption=STRING "{" "imageName" imageName=STRING hotspots+=HotSpot ("," hotspots+=HotSpot)* "}"
		public Group getGroup() { return cGroup; }

		//"@image_label"
		public Keyword getImage_labelKeyword_0() { return cImage_labelKeyword_0; }

		//caption=STRING
		public Assignment getCaptionAssignment_1() { return cCaptionAssignment_1; }

		//STRING
		public RuleCall getCaptionSTRINGTerminalRuleCall_1_0() { return cCaptionSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"imageName"
		public Keyword getImageNameKeyword_3() { return cImageNameKeyword_3; }

		//imageName=STRING
		public Assignment getImageNameAssignment_4() { return cImageNameAssignment_4; }

		//STRING
		public RuleCall getImageNameSTRINGTerminalRuleCall_4_0() { return cImageNameSTRINGTerminalRuleCall_4_0; }

		//hotspots+=HotSpot
		public Assignment getHotspotsAssignment_5() { return cHotspotsAssignment_5; }

		//HotSpot
		public RuleCall getHotspotsHotSpotParserRuleCall_5_0() { return cHotspotsHotSpotParserRuleCall_5_0; }

		//("," hotspots+=HotSpot)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//hotspots+=HotSpot
		public Assignment getHotspotsAssignment_6_1() { return cHotspotsAssignment_6_1; }

		//HotSpot
		public RuleCall getHotspotsHotSpotParserRuleCall_6_1_0() { return cHotspotsHotSpotParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class HotSpotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HotSpot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXINTTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		//HotSpot:
		//	x=INT "," y=INT "=" label=STRING;
		@Override public ParserRule getRule() { return rule; }

		//x=INT "," y=INT "=" label=STRING
		public Group getGroup() { return cGroup; }

		//x=INT
		public Assignment getXAssignment_0() { return cXAssignment_0; }

		//INT
		public RuleCall getXINTTerminalRuleCall_0_0() { return cXINTTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }

		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//label=STRING
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEquationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEquationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquationSTRINGTerminalRuleCall_1_0 = (RuleCall)cEquationAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cWhereKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSymbolsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSymbolsEqSymbolParserRuleCall_5_0 = (RuleCall)cSymbolsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSymbolsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSymbolsEqSymbolParserRuleCall_6_1_0 = (RuleCall)cSymbolsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Equation:
		//	"@equation" equation=STRING "{" description=STRING? "where" symbols+=EqSymbol ("," symbols+=EqSymbol)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"@equation" equation=STRING "{" description=STRING? "where" symbols+=EqSymbol ("," symbols+=EqSymbol)* "}"
		public Group getGroup() { return cGroup; }

		//"@equation"
		public Keyword getEquationKeyword_0() { return cEquationKeyword_0; }

		//equation=STRING
		public Assignment getEquationAssignment_1() { return cEquationAssignment_1; }

		//STRING
		public RuleCall getEquationSTRINGTerminalRuleCall_1_0() { return cEquationSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//"where"
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }

		//symbols+=EqSymbol
		public Assignment getSymbolsAssignment_5() { return cSymbolsAssignment_5; }

		//EqSymbol
		public RuleCall getSymbolsEqSymbolParserRuleCall_5_0() { return cSymbolsEqSymbolParserRuleCall_5_0; }

		//("," symbols+=EqSymbol)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//symbols+=EqSymbol
		public Assignment getSymbolsAssignment_6_1() { return cSymbolsAssignment_6_1; }

		//EqSymbol
		public RuleCall getSymbolsEqSymbolParserRuleCall_6_1_0() { return cSymbolsEqSymbolParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EqSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqSymbol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSymbolSTRINGTerminalRuleCall_0_0 = (RuleCall)cSymbolAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//EqSymbol:
		//	symbol=STRING "=" description=STRING;
		@Override public ParserRule getRule() { return rule; }

		//symbol=STRING "=" description=STRING
		public Group getGroup() { return cGroup; }

		//symbol=STRING
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }

		//STRING
		public RuleCall getSymbolSTRINGTerminalRuleCall_0_0() { return cSymbolSTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}

	public class RefToContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefToContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRtcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextSTRINGTerminalRuleCall_3_0 = (RuleCall)cContextAssignment_3.eContents().get(0);
		private final Assignment cQuestionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionsQuestionAnswerParserRuleCall_4_0 = (RuleCall)cQuestionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RefToContext:
		//	"@rtc" "{" "context" context=STRING questions+=QuestionAnswer+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"@rtc" "{" "context" context=STRING questions+=QuestionAnswer+ "}"
		public Group getGroup() { return cGroup; }

		//"@rtc"
		public Keyword getRtcKeyword_0() { return cRtcKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }

		//context=STRING
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }

		//STRING
		public RuleCall getContextSTRINGTerminalRuleCall_3_0() { return cContextSTRINGTerminalRuleCall_3_0; }

		//questions+=QuestionAnswer+
		public Assignment getQuestionsAssignment_4() { return cQuestionsAssignment_4; }

		//QuestionAnswer
		public RuleCall getQuestionsQuestionAnswerParserRuleCall_4_0() { return cQuestionsQuestionAnswerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CMap:
		//	"cmap" "{" content=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"cmap" "{" content=STRING "}"
		public Group getGroup() { return cGroup; }

		//"cmap"
		public Keyword getCmapKeyword_0() { return cCmapKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final JoveNotesElements pJoveNotes;
	private final ProcessingHintsElements pProcessingHints;
	private final ChapterDetailsElements pChapterDetails;
	private final NotesElementElements pNotesElement;
	private final WordMeaningElements pWordMeaning;
	private final QuestionAnswerElements pQuestionAnswer;
	private final FIBElements pFIB;
	private final DefinitionElements pDefinition;
	private final CharacterElements pCharacter;
	private final TeacherNoteElements pTeacherNote;
	private final MatchingElements pMatching;
	private final MatchPairElements pMatchPair;
	private final EventElements pEvent;
	private final TrueFalseElements pTrueFalse;
	private final ChemEquationElements pChemEquation;
	private final ChemCompoundElements pChemCompound;
	private final SpellbeeElements pSpellbee;
	private final ImageLabelElements pImageLabel;
	private final HotSpotElements pHotSpot;
	private final EquationElements pEquation;
	private final EqSymbolElements pEqSymbol;
	private final RefToContextElements pRefToContext;
	private final CMapElements pCMap;
	private final TerminalRule tBOOL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JoveNotesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJoveNotes = new JoveNotesElements();
		this.pProcessingHints = new ProcessingHintsElements();
		this.pChapterDetails = new ChapterDetailsElements();
		this.pNotesElement = new NotesElementElements();
		this.pWordMeaning = new WordMeaningElements();
		this.pQuestionAnswer = new QuestionAnswerElements();
		this.pFIB = new FIBElements();
		this.pDefinition = new DefinitionElements();
		this.pCharacter = new CharacterElements();
		this.pTeacherNote = new TeacherNoteElements();
		this.pMatching = new MatchingElements();
		this.pMatchPair = new MatchPairElements();
		this.pEvent = new EventElements();
		this.pTrueFalse = new TrueFalseElements();
		this.pChemEquation = new ChemEquationElements();
		this.pChemCompound = new ChemCompoundElements();
		this.pSpellbee = new SpellbeeElements();
		this.pImageLabel = new ImageLabelElements();
		this.pHotSpot = new HotSpotElements();
		this.pEquation = new EquationElements();
		this.pEqSymbol = new EqSymbolElements();
		this.pRefToContext = new RefToContextElements();
		this.pCMap = new CMapElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.sandy.xtext.JoveNotes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JoveNotes:
	//	processingHints=ProcessingHints? chapterDetails=ChapterDetails notesElements+=NotesElement*;
	public JoveNotesElements getJoveNotesAccess() {
		return pJoveNotes;
	}
	
	public ParserRule getJoveNotesRule() {
		return getJoveNotesAccess().getRule();
	}

	//ProcessingHints:
	//	skipGeneration="@skip_generation";
	public ProcessingHintsElements getProcessingHintsAccess() {
		return pProcessingHints;
	}
	
	public ParserRule getProcessingHintsRule() {
		return getProcessingHintsAccess().getRule();
	}

	//ChapterDetails:
	//	testPaper="@test_paper"? "subject" subjectName=STRING "chapterNumber" chapterNumber=INT "." subChapterNumber=INT
	//	"chapterName" chapterName=STRING;
	public ChapterDetailsElements getChapterDetailsAccess() {
		return pChapterDetails;
	}
	
	public ParserRule getChapterDetailsRule() {
		return getChapterDetailsAccess().getRule();
	}

	//NotesElement:
	//	WordMeaning | QuestionAnswer | FIB | Definition | Character | TeacherNote | Matching | Event | TrueFalse |
	//	ChemEquation | ChemCompound | Spellbee | ImageLabel | Equation | RefToContext;
	public NotesElementElements getNotesElementAccess() {
		return pNotesElement;
	}
	
	public ParserRule getNotesElementRule() {
		return getNotesElementAccess().getRule();
	}

	//WordMeaning:
	//	"@wm" word=STRING meaning=STRING;
	public WordMeaningElements getWordMeaningAccess() {
		return pWordMeaning;
	}
	
	public ParserRule getWordMeaningRule() {
		return getWordMeaningAccess().getRule();
	}

	//QuestionAnswer:
	//	"@qa" question=STRING answer=STRING cmap=CMap?;
	public QuestionAnswerElements getQuestionAnswerAccess() {
		return pQuestionAnswer;
	}
	
	public ParserRule getQuestionAnswerRule() {
		return getQuestionAnswerAccess().getRule();
	}

	//FIB:
	//	"@fib" question=STRING answers+=STRING+;
	public FIBElements getFIBAccess() {
		return pFIB;
	}
	
	public ParserRule getFIBRule() {
		return getFIBAccess().getRule();
	}

	//Definition:
	//	"@definition" term=STRING definition=STRING cmap=CMap?;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Character:
	//	"@character" character=STRING estimate=STRING cmap=CMap?;
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//TeacherNote:
	//	"@tn" note=STRING cmap=CMap?;
	public TeacherNoteElements getTeacherNoteAccess() {
		return pTeacherNote;
	}
	
	public ParserRule getTeacherNoteRule() {
		return getTeacherNoteAccess().getRule();
	}

	//Matching:
	//	"@match" question=STRING "{" pairs+=MatchPair+ "}";
	public MatchingElements getMatchingAccess() {
		return pMatching;
	}
	
	public ParserRule getMatchingRule() {
		return getMatchingAccess().getRule();
	}

	//MatchPair:
	//	matchQuestion=STRING "=" matchAnswer=STRING;
	public MatchPairElements getMatchPairAccess() {
		return pMatchPair;
	}
	
	public ParserRule getMatchPairRule() {
		return getMatchPairAccess().getRule();
	}

	//Event:
	//	"@event" event=STRING time=STRING;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//TrueFalse:
	//	"@true_false" statement=STRING truthValue=BOOL justification=STRING?;
	public TrueFalseElements getTrueFalseAccess() {
		return pTrueFalse;
	}
	
	public ParserRule getTrueFalseRule() {
		return getTrueFalseAccess().getRule();
	}

	//ChemEquation:
	//	"@chem_equation" equation=STRING description=STRING notes=STRING;
	public ChemEquationElements getChemEquationAccess() {
		return pChemEquation;
	}
	
	public ParserRule getChemEquationRule() {
		return getChemEquationAccess().getRule();
	}

	//ChemCompound:
	//	"@chem_compound" symbol=STRING chemicalName=STRING commonName=STRING;
	public ChemCompoundElements getChemCompoundAccess() {
		return pChemCompound;
	}
	
	public ParserRule getChemCompoundRule() {
		return getChemCompoundAccess().getRule();
	}

	//Spellbee:
	//	"@spellbee" word=STRING;
	public SpellbeeElements getSpellbeeAccess() {
		return pSpellbee;
	}
	
	public ParserRule getSpellbeeRule() {
		return getSpellbeeAccess().getRule();
	}

	//ImageLabel:
	//	"@image_label" caption=STRING "{" "imageName" imageName=STRING hotspots+=HotSpot ("," hotspots+=HotSpot)* "}";
	public ImageLabelElements getImageLabelAccess() {
		return pImageLabel;
	}
	
	public ParserRule getImageLabelRule() {
		return getImageLabelAccess().getRule();
	}

	//HotSpot:
	//	x=INT "," y=INT "=" label=STRING;
	public HotSpotElements getHotSpotAccess() {
		return pHotSpot;
	}
	
	public ParserRule getHotSpotRule() {
		return getHotSpotAccess().getRule();
	}

	//Equation:
	//	"@equation" equation=STRING "{" description=STRING? "where" symbols+=EqSymbol ("," symbols+=EqSymbol)* "}";
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//EqSymbol:
	//	symbol=STRING "=" description=STRING;
	public EqSymbolElements getEqSymbolAccess() {
		return pEqSymbol;
	}
	
	public ParserRule getEqSymbolRule() {
		return getEqSymbolAccess().getRule();
	}

	//RefToContext:
	//	"@rtc" "{" "context" context=STRING questions+=QuestionAnswer+ "}";
	public RefToContextElements getRefToContextAccess() {
		return pRefToContext;
	}
	
	public ParserRule getRefToContextRule() {
		return getRefToContextAccess().getRule();
	}

	//CMap:
	//	"cmap" "{" content=STRING "}";
	public CMapElements getCMapAccess() {
		return pCMap;
	}
	
	public ParserRule getCMapRule() {
		return getCMapAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
